parser grammar Anasint;
options{
    tokenVocab=Analex;
}


//programa : PROGRAMA expr EOF;
//expr: variables  (subprogramas)? instrucciones;

programa : PROGRAMA secciones;    // Va bien tener EOF para comprobar errores hasta el final del programa

secciones : variables subprogramas instrucciones;     // expr -> secciones

variables : VARIABLES (decl_vars)* ;

decl_vars : tipo vars PyC
          | vars DP tipo PyC;//ej --> s:SEQ(NUM)

vars: IDENT (COMA vars)?;// ej: int a,b,c;

tipo: NUM
    | LOG
    |SEQ PA tipo PC;



//SUBPROGRAMAS
subprogramas : SUBPROGRAMAS (funciones | procedimientos)*;

funciones : FUNCION funcionAux variables instrucciones FFUNCION ;   //INSTRUCCIONES debe contemplar dev a parte de las mismas instrucciones

funcionAux : (funcion | predicado);

funcion : IDENT PA (parametros_e)? PC DEV PA parametros_s_f PC ;        // SI devuelve NUM | SEQ -> func ,sino predicado

predicado : IDENT PA (parametro_e)? PC DEV PA LOG IDENT PC ;

parametros_e : parametro_e (COMA parametros_e)?;
parametro_e : (NUM | LOG | SEQ) IDENT;                                 //nuestro tipo seq es -> SEQ(NUM)  o SEQ(LOG) != SEQ

parametros_s_f : (NUM | SEQ) IDENT COMA parametros_s_f
		| (NUM | SEQ) IDENT
		;

procedimientos : PROCEDIMIENTO procedimientoAux variables instrucciones FPROCEDIMIENTO;

procedimientoAux : IDENT PA (parametros_e)? PC ;


//INSTRUCCIONES

instrucciones: INSTRUCCIONES (tipoInstruccion)*; //si es asignacion, condicional, iteracion, ruptura de control,dev resultados, mostrar por consola y aserto
tipoInstruccion: (asignaciones | condiciones | iteracion | ruptura | mostrar );

asignaciones: ASIGNACIONES (asignacion)*;

asignacion: IDENT ASIG expr_arit PyC;
expr_arit: expr1 (MAS | MENOS) expr_arit
 | expr1 ;

expr1: expr2 (POR|DIV) expr1
 |expr2 ;

expr2:  lista | PA expr_arit PC | MENOS expr_arit | funciones | NUMERO | IDENT | tipoLog;

lista: CA (seq_elems)? CC;

//funciones: IDENT PA (vars | NUM | tipoLog) PC;

tipoLog: CIERTO | FALSO;

seq_elems: (expr2) (COMA seq_elems)?;
//sec_elementos: CA CC | CA sec_elem CC;//Lista vacia y lista no vacia
//sec_elem: NUM (COMA sec_elem)?;

condiciones: SI PA expr_cond PC ENTONCES (asignacion | sino | dev)* FSI;
expr_cond: condicion
            | NEGACION expr_cond
            |expr_cond (CONJUNCION | DISYUNCION) expr_cond;
condicion: tipo_cond (operadorLog)?;
tipo_cond: expr_arit
           |expr2
           |funciones;

sino: SINO (asignacion | dev)*;
operadorLog:(MAYOR | MENOR| IGUAL | DISTINTO | MENORIGUAL | MAYORIGUAL);
dev: DEV vars PyC
   | DEV tipoLog PyC;
iteracion: MIENTRAS PA expr_cond PC HACER (tipoInstruccion) FMIENTRAS;
ruptura: MIENTRAS PA expr_cond PC HACER RUPTURA FMIENTRAS;
mostrar: MOSTRAR PA vars PC PyC;